{
  "version": 3,
  "sources": ["../../langchain/dist/prompts/chat.js"],
  "sourcesContent": ["// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, BaseMessage, BasePromptValue, ChatMessage, HumanMessage, SystemMessage, coerceMessageLikeToMessage, isBaseMessage, } from \"../schema/index.js\";\nimport { Runnable } from \"../schema/runnable/index.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { PromptTemplate } from \"./prompt.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    /**\n     * Calls the formatMessages method with the provided input and options.\n     * @param input Input for the formatMessages method\n     * @param options Optional BaseCallbackConfig\n     * @returns Formatted output messages\n     */\n    async invoke(input, options) {\n        return this._callWithConfig((input) => this.formatMessages(input), input, { ...options, runType: \"prompt\" });\n    }\n}\n/**\n * Class that represents a chat prompt value. It extends the\n * BasePromptValue and includes an array of BaseMessage instances.\n */\nexport class ChatPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ChatPromptValue\";\n    }\n    constructor(fields) {\n        if (Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { messages: fields };\n        }\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = fields.messages;\n    }\n    toString() {\n        return JSON.stringify(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    static lc_name() {\n        return \"MessagesPlaceholder\";\n    }\n    constructor(fields) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = { variableName: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = fields.variableName;\n    }\n    get inputVariables() {\n        return [this.variableName];\n    }\n    formatMessages(values) {\n        return Promise.resolve(values[this.variableName]);\n    }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(fields) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new ChatPromptValue(resultMessages);\n    }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"ChatMessagePromptTemplate\";\n    }\n    constructor(fields, role) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { prompt: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    async format(values) {\n        return new ChatMessage(await this.prompt.format(values), this.role);\n    }\n    static fromTemplate(template, role) {\n        return new this(PromptTemplate.fromTemplate(template), role);\n    }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class HumanMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"HumanMessagePromptTemplate\";\n    }\n    async format(values) {\n        return new HumanMessage(await this.prompt.format(values));\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"AIMessagePromptTemplate\";\n    }\n    async format(values) {\n        return new AIMessage(await this.prompt.format(values));\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class SystemMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"SystemMessagePromptTemplate\";\n    }\n    async format(values) {\n        return new SystemMessage(await this.prompt.format(values));\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n    return (typeof baseMessagePromptTemplateLike\n        .formatMessages === \"function\");\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike) {\n    if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) ||\n        isBaseMessage(messagePromptTemplateLike)) {\n        return messagePromptTemplateLike;\n    }\n    const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n    if (message._getType() === \"human\") {\n        return HumanMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (message._getType() === \"ai\") {\n        return AIMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (message._getType() === \"system\") {\n        return SystemMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (ChatMessage.isInstance(message)) {\n        return ChatMessagePromptTemplate.fromTemplate(message.content, message.role);\n    }\n    else {\n        throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n    }\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n    static lc_name() {\n        return \"ChatPromptTemplate\";\n    }\n    get lc_aliases() {\n        return {\n            promptMessages: \"messages\",\n        };\n    }\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages) {\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (promptMessage instanceof BaseMessage)\n                    continue;\n                for (const inputVariable of promptMessage.inputVariables) {\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const totalInputVariables = this.inputVariables;\n            const inputVariablesInstance = new Set(this.partialVariables\n                ? totalInputVariables.concat(Object.keys(this.partialVariables))\n                : totalInputVariables);\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference,\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference,\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage) {\n                resultMessages.push(promptMessage);\n            }\n            else {\n                const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n                    if (!(inputVariable in allValues)) {\n                        throw new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``);\n                    }\n                    acc[inputVariable] = allValues[inputVariable];\n                    return acc;\n                }, {});\n                const message = await promptMessage.formatMessages(inputValues);\n                resultMessages = resultMessages.concat(message);\n            }\n        }\n        return resultMessages;\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromPromptMessages(promptMessages) {\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? promptMessage.promptMessages\n            : [_coerceMessagePromptTemplateLike(promptMessage)]), []);\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) => \n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? Object.assign(acc, promptMessage.partialVariables)\n            : acc, Object.create(null));\n        const inputVariables = new Set();\n        for (const promptMessage of flattenedMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage)\n                continue;\n            for (const inputVariable of promptMessage.inputVariables) {\n                if (inputVariable in flattenedPartialVariables) {\n                    continue;\n                }\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new ChatPromptTemplate({\n            inputVariables: [...inputVariables],\n            promptMessages: flattenedMessages,\n            partialVariables: flattenedPartialVariables,\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["input"]
}
